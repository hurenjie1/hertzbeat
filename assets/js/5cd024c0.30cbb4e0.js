"use strict";(self.webpackChunkhertzbeat=self.webpackChunkhertzbeat||[]).push([[67393],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var o=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=o.createContext({}),c=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=c(e.components);return o.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},p=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),p=c(n),m=r,h=p["".concat(s,".").concat(m)]||p[m]||u[m]||a;return n?o.createElement(h,i(i({ref:t},d),{},{components:n})):o.createElement(h,i({ref:t},d))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=p;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var c=2;c<a;c++)i[c]=n[c];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}p.displayName="MDXCreateElement"},68663:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var o=n(87462),r=(n(67294),n(3905));const a={id:"extend-jdbc",title:"JDBC Protocol Custom Monitoring",sidebar_label:"JDBC Protocol Custom Monitoring"},i=void 0,l={unversionedId:"advanced/extend-jdbc",id:"version-v1.1.x/advanced/extend-jdbc",title:"JDBC Protocol Custom Monitoring",description:"From Custom Monitoring, you are familiar with how to customize types, Metrics, protocols, etc. Here we will introduce in detail how to use JDBC(support mysql,mariadb,postgresql,sqlserver at present) to customize Metric monitoring.",source:"@site/i18n/en/docusaurus-plugin-content-docs/version-v1.1.x/advanced/extend-jdbc.md",sourceDirName:"advanced",slug:"/advanced/extend-jdbc",permalink:"/docs/v1.1.x/advanced/extend-jdbc",draft:!1,editUrl:"https://github.com/dromara/hertzbeat/edit/master/home/i18n/en/docusaurus-plugin-content-docs/version-v1.1.x/advanced/extend-jdbc.md",tags:[],version:"v1.1.x",frontMatter:{id:"extend-jdbc",title:"JDBC Protocol Custom Monitoring",sidebar_label:"JDBC Protocol Custom Monitoring"},sidebar:"docs",previous:{title:"Tutorial 2 Get TOKEN for subsequent authentication",permalink:"/docs/v1.1.x/advanced/extend-http-example-token"},next:{title:"SSH Protocol Custom Monitoring",permalink:"/docs/v1.1.x/advanced/extend-ssh"}},s={},c=[{value:"JDBC protocol collection process",id:"jdbc-protocol-collection-process",level:3},{value:"Data parsing method",id:"data-parsing-method",level:3},{value:"<strong>oneRow</strong>",id:"onerow",level:4},{value:"<strong>multiRow</strong>",id:"multirow",level:4},{value:"<strong>columns</strong>",id:"columns",level:4},{value:"Custom Steps",id:"custom-steps",level:3},{value:"Monitoring configuration definition file",id:"monitoring-configuration-definition-file",level:3}],d={toc:c};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,o.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"From ",(0,r.kt)("a",{parentName:"p",href:"extend-point"},"Custom Monitoring"),", you are familiar with how to customize types, Metrics, protocols, etc. Here we will introduce in detail how to use JDBC(support mysql,mariadb,postgresql,sqlserver at present) to customize Metric monitoring.\nJDBC protocol custom monitoring allows us to easily monitor Metrics we want by writing SQL query statement.   ")),(0,r.kt)("h3",{id:"jdbc-protocol-collection-process"},"JDBC protocol collection process"),(0,r.kt)("p",null,"\u3010",(0,r.kt)("strong",{parentName:"p"},"System directly connected to MYSQL"),"\u3011->\u3010",(0,r.kt)("strong",{parentName:"p"},"Run SQL query statement"),"\u3011->\u3010",(0,r.kt)("strong",{parentName:"p"},"parse reponse data: oneRow, multiRow, columns"),"\u3011->\u3010",(0,r.kt)("strong",{parentName:"p"},"Metric data extraction"),"\u3011   "),(0,r.kt)("p",null,"It can be seen from the process that we define a monitoring type of JDBC protocol. We need to configure SSH request parameters, configure which Metrics to obtain, and configure query SQL statements."),(0,r.kt)("h3",{id:"data-parsing-method"},"Data parsing method"),(0,r.kt)("p",null,"We can obtain the corresponding Metric data through the data fields queried by SQL and the Metric mapping we need. At present, there are three mapping parsing methods\uff1aoneRow, multiRow, columns."),(0,r.kt)("h4",{id:"onerow"},(0,r.kt)("strong",{parentName:"h4"},"oneRow")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Query a row of data, return the column name of the result set through query and map them to the queried field.  ")),(0,r.kt)("p",null,"eg\uff1a",(0,r.kt)("br",{parentName:"p"}),"\n","queried Metric fields\uff1aone two three four\nquery SQL\uff1aselect one, two, three, four from book limit 1;\nHere the Metric field and the response data can be mapped into a row of collected data one by one.     "),(0,r.kt)("h4",{id:"multirow"},(0,r.kt)("strong",{parentName:"h4"},"multiRow")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Query multiple rows of data, return the column names of the result set and map them to the queried fields.  ")),(0,r.kt)("p",null,"eg\uff1a",(0,r.kt)("br",{parentName:"p"}),"\n","queried Metric fields\uff1aone two three four\nquery SQL\uff1aselect one, two, three, four from book;\nHere the Metric field and the response data can be mapped into multiple rows of collected data one by one. "),(0,r.kt)("h4",{id:"columns"},(0,r.kt)("strong",{parentName:"h4"},"columns")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Collect a row of Metric data. By matching the two columns of queried data (key value), key and the queried field, value is the value of the query field. ")),(0,r.kt)("p",null,"eg\uff1a",(0,r.kt)("br",{parentName:"p"}),"\n","queried fields\uff1aone two three four",(0,r.kt)("br",{parentName:"p"}),"\n","query SQL\uff1aselect key, value from book;",(0,r.kt)("br",{parentName:"p"}),"\n","SQL response data\uff1a   "),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"key"),(0,r.kt)("th",{parentName:"tr",align:null},"value"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"one"),(0,r.kt)("td",{parentName:"tr",align:null},"243")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"two"),(0,r.kt)("td",{parentName:"tr",align:null},"435")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"three"),(0,r.kt)("td",{parentName:"tr",align:null},"332")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"four"),(0,r.kt)("td",{parentName:"tr",align:null},"643")))),(0,r.kt)("p",null,"Here by mapping the Metric field with the key of the response data, we can  obtain the corresponding value as collection and monitoring data."),(0,r.kt)("h3",{id:"custom-steps"},"Custom Steps"),(0,r.kt)("p",null,"In order to configure a custom monitoring type, you need to add and configure YML file."),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Monitoring configuration definition file named after monitoring type - eg\uff1aexample_sql.yml in the installation directory /hertzbeat/app/"),(0,r.kt)("li",{parentName:"ol"},"Restart hertzbeat system, we successfully fit a new custom monitoring type.")),(0,r.kt)("hr",null),(0,r.kt)("p",null,"Configuration usages of the file is detailed below. Please pay attention to usage annotation.   "),(0,r.kt)("h3",{id:"monitoring-configuration-definition-file"},"Monitoring configuration definition file"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Monitoring configuration definition file is used to define ",(0,r.kt)("em",{parentName:"p"},"the name of monitoring type(international), request parameter mapping, index information, collection protocol configuration information"),", etc.  ")),(0,r.kt)("p",null,"eg\uff1aDefine a custom monitoring type named example_sql which use the JDBC protocol to collect data.",(0,r.kt)("br",{parentName:"p"}),"\n","The file name: example_sql.yml in /define/example_sql.yml   "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"# The monitoring type category\uff1aservice-application service monitoring db-database monitoring custom-custom monitoring os-operating system monitoring\ncategory: db\n# Monitoring application type(consistent with the file name) eg: linux windows tomcat mysql aws...\napp: example_sql\nname:\n  zh-CN: \u6a21\u62dfMYSQL\u5e94\u7528\u7c7b\u578b\n  en-US: MYSQL EXAMPLE APP\n# Monitoring parameter definition file is used to define required input parameter field structure definition Front-end page render input parameter box according to structure\nparams:\n  - field: host\n    name:\n      zh-CN: \u4e3b\u673aHost\n      en-US: Host\n    type: host\n    required: true\n  - field: port\n    name:\n      zh-CN: \u7aef\u53e3\n      en-US: Port\n    type: number\n    range: '[0,65535]'\n    required: true\n    defaultValue: 80\n    placeholder: 'Please enter the port'\n  - field: database\n    name:\n      zh-CN: \u6570\u636e\u5e93\u540d\u79f0\n      en-US: Database\n    type: text\n    required: false\n  - field: username\n    name:\n      zh-CN: \u7528\u6237\u540d\n      en-US: Username\n    type: text\n    limit: 20\n    required: false\n  - field: password\n    name:\n      zh-CN: \u5bc6\u7801\n      en-US: Password\n    type: password\n    required: false\n  - field: url\n    name:\n      zh-CN: Url\n      en-US: Url\n    type: text\n    required: false\n# Metric group list\nmetrics:\n  - name: basic\n    # The smaller Metric group scheduling priority(0-127), the higher the priority. After completion of the high priority Metric group collection,the low priority Metric group will then be scheduled. Metric groups with the same priority  will be scheduled in parallel.\n    # Metric group with a priority of 0 is an availability group which will be scheduled first. If the collection succeeds, the  scheduling will continue otherwise interrupt scheduling.\n    priority: 0\n    # metrics fields list\n    fields:\n      # Metric information include field: name   type: field type(0-number: number, 1-string: string)   instance: primary key of instance or not   unit: Metric unit\n      - field: version\n        type: 1\n        instance: true\n      - field: port\n        type: 1\n      - field: datadir\n        type: 1\n      - field: max_connections\n        type: 0\n    # (optional)Monitoring Metric alias mapping to the Metric name above. The field used to collect interface data is not the final Metric name directly. This alias is required for mapping conversion.\n    aliasFields:\n      - version\n      - version_compile_os\n      - version_compile_machine\n      - port\n      - datadir\n      - max_connections\n    # (optional)The Metric calculation expression works with the above alias to calculate the final required Metric value.\n    # eg: cores=core1+core2, usage=usage, waitTime=allTime-runningTime\n    calculates:\n      - port=port\n      - datadir=datadir\n      - max_connections=max_connections\n      - version=version+\"_\"+version_compile_os+\"_\"+version_compile_machine\n    protocol: jdbc\n    jdbc:\n      # host: ipv4 ipv6 domain name\n      host: ^_^host^_^\n      # port\n      port: ^_^port^_^\n      platform: mysql\n      username: ^_^username^_^\n      password: ^_^password^_^\n      database: ^_^database^_^\n      # SQL query method\uff1aoneRow, multiRow, columns\n      queryType: columns\n      # sql\n      sql: show global variables where Variable_name like 'version%' or Variable_name = 'max_connections' or Variable_name = 'datadir' or Variable_name = 'port';\n      url: ^_^url^_^\n\n  - name: status\n    priority: 1\n    fields:\n      # Metric information include field: name   type: field type(0-number: number, 1-string: string)   instance: primary key of instance or not   unit: Metric unit\n      - field: threads_created\n        type: 0\n      - field: threads_connected\n        type: 0\n      - field: threads_cached\n        type: 0\n      - field: threads_running\n        type: 0\n    # (optional)Monitoring Metric alias mapping to the Metric name above. The field used to collect interface data is not the final Metric name directly. This alias is required for mapping conversion.\n    aliasFields:\n      - threads_created\n      - threads_connected\n      - threads_cached\n      - threads_running\n    # (optional)The Metric calculation expression works with the above alias to calculate the final required Metric value.\n    # eg: cores=core1+core2, usage=usage, waitTime=allTime-runningTime\n    calculates:\n      - threads_created=threads_created\n      - threads_connected=threads_connected\n      - threads_cached=threads_cached\n      - threads_running=threads_running\n    protocol: jdbc\n    jdbc:\n      # host: ipv4 ipv6 domain name\n      host: ^_^host^_^\n      # port\n      port: ^_^port^_^\n      platform: mysql\n      username: ^_^username^_^\n      password: ^_^password^_^\n      database: ^_^database^_^\n      # SQL query method: oneRow, multiRow, columns\n      queryType: columns\n      # sql\n      sql: show global status where Variable_name like 'thread%' or Variable_name = 'com_commit' or Variable_name = 'com_rollback' or Variable_name = 'questions' or Variable_name = 'uptime';\n      url: ^_^url^_^\n\n  - name: innodb\n    priority: 2\n    fields:\n      # Metric information include field: name   type: field type(0-number: number, 1-string: string)   instance: primary key of instance or not   unit: Metric unit\n      - field: innodb_data_reads\n        type: 0\n        unit: times\n      - field: innodb_data_writes\n        type: 0\n        unit: times\n      - field: innodb_data_read\n        type: 0\n        unit: kb\n      - field: innodb_data_written\n        type: 0\n        unit: kb\n    protocol: jdbc\n    jdbc:\n      # host: ipv4 ipv6 domain name\n      host: ^_^host^_^\n      # port\n      port: ^_^port^_^\n      platform: mysql\n      username: ^_^username^_^\n      password: ^_^password^_^\n      database: ^_^database^_^\n      # SQL query method\uff1aoneRow, multiRow, columns\n      queryType: columns\n      # sql\n      sql: show global status where Variable_name like 'innodb%';\n      url: ^_^url^_^\n")))}u.isMDXComponent=!0}}]);